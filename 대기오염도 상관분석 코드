{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1uU2Rl8GGm_0EG8-bHRzG4arAMzldFcXN",
      "authorship_tag": "ABX9TyMR3DjA/l1TXAb584I+XL/z",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jmijo/2023_first/blob/main/%EC%A4%91%EA%B0%84%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8_ipynb%EC%9D%98_%EC%82%AC%EB%B3%B8.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "18KtjML1QE5w"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "data = pd.read_csv('/content/drive/MyDrive/서울시_3년_일별평균대기오염도.csv')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w3shfDmuQpD7",
        "outputId": "9ff09299-f95a-4ba7-97db-7a95d391cf6c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 54800 entries, 0 to 54799\n",
            "Data columns (total 8 columns):\n",
            " #   Column        Non-Null Count  Dtype  \n",
            "---  ------        --------------  -----  \n",
            " 0   측정일시          54800 non-null  int64  \n",
            " 1   측정소명          54800 non-null  object \n",
            " 2   이산화질소농도(ppm)  54045 non-null  float64\n",
            " 3   오존농도(ppm)     54211 non-null  float64\n",
            " 4   일산화탄소농도(ppm)  54013 non-null  float64\n",
            " 5   아황산가스농도(ppm)  54142 non-null  float64\n",
            " 6   미세먼지농도(㎍/㎥)   53899 non-null  float64\n",
            " 7   초미세먼지농도(㎍/㎥)  53920 non-null  float64\n",
            "dtypes: float64(6), int64(1), object(1)\n",
            "memory usage: 3.3+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_s = data[data['측정소명'] == '송파구']\n",
        "data_s.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 267
        },
        "id": "w0ACmyquRw5h",
        "outputId": "ed6ee07a-c337-4f60-c0bf-6cf225c81368"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           측정일시 측정소명  이산화질소농도(ppm)  오존농도(ppm)  일산화탄소농도(ppm)  아황산가스농도(ppm)  \\\n",
              "10220  20220101  송파구         0.034      0.013           0.6         0.004   \n",
              "10221  20220102  송파구         0.036      0.008           0.5         0.003   \n",
              "10222  20220103  송파구         0.043      0.007           0.6         0.004   \n",
              "10223  20220104  송파구         0.032      0.013           0.6         0.004   \n",
              "10224  20220105  송파구         0.044      0.005           0.8         0.004   \n",
              "\n",
              "       미세먼지농도(㎍/㎥)  초미세먼지농도(㎍/㎥)  \n",
              "10220         28.0          14.0  \n",
              "10221         32.0          22.0  \n",
              "10222         27.0          15.0  \n",
              "10223         35.0          20.0  \n",
              "10224         46.0          30.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bb0c44a0-950b-4ee9-bf30-0723e2e8a530\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>측정일시</th>\n",
              "      <th>측정소명</th>\n",
              "      <th>이산화질소농도(ppm)</th>\n",
              "      <th>오존농도(ppm)</th>\n",
              "      <th>일산화탄소농도(ppm)</th>\n",
              "      <th>아황산가스농도(ppm)</th>\n",
              "      <th>미세먼지농도(㎍/㎥)</th>\n",
              "      <th>초미세먼지농도(㎍/㎥)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>10220</th>\n",
              "      <td>20220101</td>\n",
              "      <td>송파구</td>\n",
              "      <td>0.034</td>\n",
              "      <td>0.013</td>\n",
              "      <td>0.6</td>\n",
              "      <td>0.004</td>\n",
              "      <td>28.0</td>\n",
              "      <td>14.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10221</th>\n",
              "      <td>20220102</td>\n",
              "      <td>송파구</td>\n",
              "      <td>0.036</td>\n",
              "      <td>0.008</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0.003</td>\n",
              "      <td>32.0</td>\n",
              "      <td>22.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10222</th>\n",
              "      <td>20220103</td>\n",
              "      <td>송파구</td>\n",
              "      <td>0.043</td>\n",
              "      <td>0.007</td>\n",
              "      <td>0.6</td>\n",
              "      <td>0.004</td>\n",
              "      <td>27.0</td>\n",
              "      <td>15.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10223</th>\n",
              "      <td>20220104</td>\n",
              "      <td>송파구</td>\n",
              "      <td>0.032</td>\n",
              "      <td>0.013</td>\n",
              "      <td>0.6</td>\n",
              "      <td>0.004</td>\n",
              "      <td>35.0</td>\n",
              "      <td>20.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10224</th>\n",
              "      <td>20220105</td>\n",
              "      <td>송파구</td>\n",
              "      <td>0.044</td>\n",
              "      <td>0.005</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.004</td>\n",
              "      <td>46.0</td>\n",
              "      <td>30.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bb0c44a0-950b-4ee9-bf30-0723e2e8a530')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-bb0c44a0-950b-4ee9-bf30-0723e2e8a530 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-bb0c44a0-950b-4ee9-bf30-0723e2e8a530');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 77
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_s.drop('측정소명', axis = 1, inplace = True)\n",
        "data_s.drop('측정일시', axis = 1, inplace = True)\n",
        "data_s.drop('미세먼지농도(㎍/㎥)', axis = 1, inplace = True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2cLfcmzBiUO-",
        "outputId": "f8450e77-c6b8-4b4c-a12b-3ddc5d920a7a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-78-e8fb7a943467>:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  data_s.drop('측정소명', axis = 1, inplace = True)\n",
            "<ipython-input-78-e8fb7a943467>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  data_s.drop('측정일시', axis = 1, inplace = True)\n",
            "<ipython-input-78-e8fb7a943467>:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  data_s.drop('미세먼지농도(㎍/㎥)', axis = 1, inplace = True)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_s.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YNO8lBA6kwtf",
        "outputId": "c4152ec7-3996-4c76-ad26-bc78a29b3d28"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1096, 5)"
            ]
          },
          "metadata": {},
          "execution_count": 79
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_s.columns = ['NO2', 'O3', 'CO','SO2','PM2.5']\n",
        "data_s.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hTSgbk2Jce6H",
        "outputId": "1e5b96ab-eda2-44df-ebb5-7e447227831f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['NO2', 'O3', 'CO', 'SO2', 'PM2.5'], dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 80
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_s.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "5aZ6MqEzkS_c",
        "outputId": "95e4ff24-515f-40f5-bbb7-e5dfa366dcc7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               NO2           O3           CO          SO2        PM2.5\n",
              "count  1094.000000  1095.000000  1095.000000  1091.000000  1093.000000\n",
              "mean      0.026175     0.025916     0.489498     0.002998    19.366880\n",
              "std       0.012540     0.013351     0.159493     0.000760    11.951592\n",
              "min       0.003000     0.002000     0.200000     0.001000     1.000000\n",
              "25%       0.016000     0.016000     0.400000     0.002000    11.000000\n",
              "50%       0.023000     0.025000     0.500000     0.003000    17.000000\n",
              "75%       0.035000     0.036000     0.600000     0.003000    25.000000\n",
              "max       0.068000     0.078000     1.100000     0.005000    90.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-317c0a5f-c27b-46df-aabf-cb1c0e90902d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>NO2</th>\n",
              "      <th>O3</th>\n",
              "      <th>CO</th>\n",
              "      <th>SO2</th>\n",
              "      <th>PM2.5</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1094.000000</td>\n",
              "      <td>1095.000000</td>\n",
              "      <td>1095.000000</td>\n",
              "      <td>1091.000000</td>\n",
              "      <td>1093.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.026175</td>\n",
              "      <td>0.025916</td>\n",
              "      <td>0.489498</td>\n",
              "      <td>0.002998</td>\n",
              "      <td>19.366880</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.012540</td>\n",
              "      <td>0.013351</td>\n",
              "      <td>0.159493</td>\n",
              "      <td>0.000760</td>\n",
              "      <td>11.951592</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.003000</td>\n",
              "      <td>0.002000</td>\n",
              "      <td>0.200000</td>\n",
              "      <td>0.001000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.016000</td>\n",
              "      <td>0.016000</td>\n",
              "      <td>0.400000</td>\n",
              "      <td>0.002000</td>\n",
              "      <td>11.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.023000</td>\n",
              "      <td>0.025000</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>0.003000</td>\n",
              "      <td>17.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>0.035000</td>\n",
              "      <td>0.036000</td>\n",
              "      <td>0.600000</td>\n",
              "      <td>0.003000</td>\n",
              "      <td>25.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>0.068000</td>\n",
              "      <td>0.078000</td>\n",
              "      <td>1.100000</td>\n",
              "      <td>0.005000</td>\n",
              "      <td>90.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-317c0a5f-c27b-46df-aabf-cb1c0e90902d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-317c0a5f-c27b-46df-aabf-cb1c0e90902d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-317c0a5f-c27b-46df-aabf-cb1c0e90902d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 81
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize = (5,10))\n",
        "sns.boxplot(y = data_s['NO2'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "zm7pILzJXqQ2",
        "outputId": "d1d9ab0a-e9bd-4c7d-a181-82a1bf1bdcd8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='NO2'>"
            ]
          },
          "metadata": {},
          "execution_count": 82
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize = (5,10))\n",
        "sns.boxplot(y = data_s['O3'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "pbvd9jvbXqdi",
        "outputId": "b0c89bcf-8368-49bc-bdda-4c93a615763a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='O3'>"
            ]
          },
          "metadata": {},
          "execution_count": 83
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize = (5,10))\n",
        "sns.boxplot(y = data_s['CO'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "sqfmRr4DXqxH",
        "outputId": "666b5a26-a29e-4d8c-9eb7-d482481483f2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='CO'>"
            ]
          },
          "metadata": {},
          "execution_count": 84
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize = (5,10))\n",
        "sns.boxplot(y = data_s['SO2'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "3nQrBwMJX0LP",
        "outputId": "17d492e5-b786-46e7-fa33-a8c53c181ba4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='SO2'>"
            ]
          },
          "metadata": {},
          "execution_count": 85
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize = (5,10))\n",
        "sns.boxplot(y = data_s['PM2.5'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "1NA3HnXgX4hf",
        "outputId": "a6b6c7ca-760f-45d7-b652-e639805fed57"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='PM2.5'>"
            ]
          },
          "metadata": {},
          "execution_count": 86
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x1000 with 1 Axes>"
            ],
            "image/png": "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FuNLmpubY9WqVZO8CKYGYYScampqio0bNx72vquuuuqI0YTpThghx1asWBFnnHFG3dncuXPjggsuyGgRND5hhJz7/Oc/X3f7pptuymgJTA3CCDn34IMP1t3++7//+4yWwNQgjJBjQ0NDUS6X687K5XIMDQ1ltAganzBCTtVqtdiyZcsRz2u1WgaroPEJI+TU4OBgDAwMHPJexmq1GgMDAzE4OJjRMmhswgg51dnZGYsXLz7kbRlNTU2xZMmS6OzszGgZNDZhhJwqFAqxfv36I54XCoUMVkHjE0bIsY6OjiiVSuMRLBQKUSqVYsGCBRkvg8YljJBzq1evrgvju9/97owXQWMTRsi5v/7rv46xsbGIiBgbG4tvfOMbGS+CxiaMkGPexwgTJ4yQU97HCEdHGCGnvI8Rjo4wQk55HyMcHWGEnPI+Rjg6wgg59tL7GFPexwgvTxgh5377t3+77vby5cszWgJTgzBCzn3sYx+ru/3xj388oyUwNQgj5FhfX188/fTTdWd79+6Nvr6+jBZB4xNGyKlqtRqbN28+7H2bN28+5G0cwIuEEXJqx44dR4xftVqNHTt2TPIimBqEEXJq1apVh7yH8SXNzc2xatWqSV4EU4MwQk41NTXFxo0bD3vfVVdddcRownQnjJBjK1asiDPOOKPubO7cuXHBBRdktAganzBCzl133XV1t6+99tqMlsDUIIyQc5/85Cfrbn/qU5/KaAlMDcIIOeZ9jDBxwgg55X2McHSEEXLK+xjh6Agj5JT3McLREUbIKe9jhKMjjJBjK1asiNNOO63u7PTTT/c+RngZwgg5V6lU6m7/4he/yGgJTA3CCDl27733HhLCX/ziF3HvvfdmtAganzBCTr3wwgtx5513Hva+O++8M1544YVJXgRTgzBCTn3lK1/5le6H6UoYIacuvfTSX+l+mK6EEXKqubk5PvzhDx/2vo985CPR3Nw8yYtgajgmYTx48OCxeBjgGHvPe94TJ510Ut3ZSSedFGvWrMloETS+CYXxa1/7Whw4cGD89pe+9KU466yzolgsxpw5c/yt/dCAtmzZ8rK3gXoTCuN73vOeePbZZyMi4u67746NGzfG+973vnjggQdiw4YNceONN8aXv/zl47ETOErf/va3625/5zvfyWgJTA2FWq1We6WfPGPGjNizZ0/MnTs3zj///Pj93//9ur9y6vbbb4+77rornnjiieMy9miMjo5GW1tbjIyMRGtra9ZzYFINDQ3F2rVr6/4y8ebm5ti2bVt0dHRkuAwm10RaMOGvMRYKhYiI+MlPfnLIXyt1wQUXxI9//OOJPiRwHNRqtcO+bPrS+QT+mximlQl/W1pfX1+0tbVFsViMn//853X3VSqV8XAC2RocHIyBgYFDzqvVagwMDMTg4GCcddZZGSyDxjbhMK5du3b8x9/61rdi6dKl47cfffTReNWrXnVslgG/ks7Ozli8eHE88cQTdS+lNjU1xbnnnhudnZ0ZroPGNaEwjo2Nvez97e3tsWnTpl9pEHBsFAqFWL9+fd1/zKbnXt2Bwzumb/BftWpVXHjhhcfyIYFfQUdHR5RKpfEIFgqFKJVKsWDBgoyXQePyN99AznV3d8fs2bMjImLOnDlRKpUyXgSN7ZiG8ZxzznFVcGgwxWIxenp6or29PTZs2BDFYjHrSdDQjulflrhp06YYGRk5lg8J42q12iEX3eWXq9Vqcc4558Qdd9wRLS0tLlQ8QcVi0ddjp5ljGsaLLrroWD4c1KlUKrFy5cqsZzDN7Ny5M2bOnJn1DCaRrzECQGLCzxj/7u/+Lr7xjW/E6aefHpdddlmcffbZ4/c988wzsXr16vjWt751TEdCxIsvae3cuTPrGVNOpVKJiy++OCIi7rvvPl9jnCC/XtPPhMJYLpfj0ksvjRUrVsSTTz4Zt9xyS3z5y1+O7u7uiIg4cOBAPPzww8dlKBQKBS9p/YqKxaJfQ/glJhTGzZs3R29vb3z0ox+NiBcvQ3XZZZdFpVKJD3zgA8dlIABMpgmF8Uc/+lG8613vGr/9h3/4h3HGGWfE7/3e78XBgwfHX64BgKlqQmFsbW2N4eHhWLRo0fjZ29/+9tixY0esWrUqhoaGjvlAAJhME/qu1CVLlhz2mx/e9ra3xQMPPBA333zzsdoFAJmYUBhf7m/NWLZsWTzwwANx6aWXHpNhAJCFCb2U+ra3vS3e9ra3HfH+t7/97fH2t7/9Vx4FAFnxBn8ASEzoGeMr/QvC04uiAsBUMqEw1mq1OOuss2Lt2rXxxje+8XhtAoDMTCiM3/3ud2Pr1q2xZcuWWLRoUVx22WXR3d0dp5122vHaBwCTakJfYzzvvPPi9ttvj//6r/+Knp6euO+++6KjoyMuueSSePDBB4/XRgCYNEf1zTfFYjHe+973xq5du+IHP/hB7N27N1asWBH/8z//c6z3AcCkOurrMQ4NDcW2bdti27Zt8fOf/zw2btwYra2tx3IbAEy6CYXxwIEDcd9998XWrVvjO9/5TqxcuTJuvvnmWLly5Sv+jlUAaGQTCuOZZ54Zs2bNirVr18Ztt90Wc+fOjYiI559/vu7zPHMEYKqaUBifeeaZeOaZZ+KGG26IT3/604fcX6vVolAoeB8jAFPWhML4D//wD8drBwA0hAmF8a1vfWvcdNNNcf/998eBAwfine98Z1x33XWuCA5Abkzo7Rqf/exn40//9E/jlFNOiQULFsSWLVti3bp1x2sbAEy6CYXxK1/5Stx2223xzW9+M/7mb/4mHnjggdi+fXuMjY0dr30AMKkmFMbBwcH4nd/5nfHby5cvj0KhEE899dQxHwYAWZhQGF944YVDLlR8wgknxMGDB4/pKADIyoSvrvG+970vWlpaxs8qlUr80R/9UZx88snjZ9/4xjeO3UIAmEQTCuPatWsPOXvve997zMYAQNYmFMa77777eO0AgIZwVFfXAIC8EkYASAgjACSEEQASwggACWEEgIQwAkBCGAEgIYwAkBBGAEgIIwAkhBEAEsIIAAlhBICEMAJAQhgBINEwYfyzP/uzKBQKceWVV46fVSqVWLduXcyePTtOOeWUWL16dQwPD2c3EoDca4gwDgwMxJ133hmvf/3r6843bNgQDzzwQHz961+Phx9+OJ566ql497vfndFKAKaDzMP4s5/9LLq7u+Ouu+6K0047bfx8ZGQktm7dGr29vfGOd7wjzj333Lj77rujv78/Hn300SM+3v79+2N0dLTuAwBeqczDuG7duvjd3/3dWL58ed35448/HgcPHqw7P/vss6OzszMeeeSRIz7epk2boq2tbfxj4cKFx207APmTaRi/+tWvxhNPPBGbNm065L49e/bEiSeeGKeeemrdeXt7e+zZs+eIj3n11VfHyMjI+Mfu3buP9WwAcqw5q3/w7t27Y/369fHggw9GsVg8Zo/b0tISLS0tx+zxAJheMnvG+Pjjj8fevXvjTW96UzQ3N0dzc3M8/PDD8cUvfjGam5ujvb09Dhw4EM8++2zdzxseHo558+ZlMxqA3MvsGeM73/nO+P73v1939v73vz/OPvvs+JM/+ZNYuHBhnHDCCbFr165YvXp1REQ8+eSTMTg4GEuXLs1iMgDTQGZhnDVrVrz2ta+tOzv55JNj9uzZ4+cf+MAHoqenJ04//fRobW2NK664IpYuXRpvfvObs5gMwDSQWRhfiS984QsxY8aMWL16dezfvz8uvPDCuO2227KeBUCOFWq1Wi3rEcfT6OhotLW1xcjISLS2tmY9BybdL37xi1i5cmVEROzcuTNmzpyZ8SKYfBNpQebvYwSARiKMAJAQRgBICCMAJIQRABLCCAAJYQSAhDACQEIYASAhjACQEEYASAgjACSEEQASwggACWEEgIQwAkBCGAEgIYwAkBBGAEgIIwAkhBEAEsIIAAlhBICEMAJAQhgBICGMAJAQRgBICCMAJIQRABLCCAAJYQSAhDACQEIYASAhjACQEEYASAgjACSEEQASwggACWEEgIQwAkBCGAEgIYwAkBBGAEgIIwAkhBEAEsIIAAlhBICEMAJAQhgBICGMAJAQRgBICCMAJIQRABLCCAAJYQSAhDACQEIYASAhjACQEEYASAgjACSEEQASwggACWEEgIQwAkBCGAEgIYwAkBBGAEgIIwAkhBEAEsIIAAlhBICEMAJAQhgBICGMAJAQRgBICCMAJIQRABLCCAAJYQSAhDACQEIYASAhjACQEEYASAgjACSEEQASwggACWEEgIQwAkBCGAEgIYwAkBBGAEgIIwAkhBEAEsIIAAlhBICEMAJAQhgBICGMAJAQRgBICCMAJIQRABLCCAAJYQSAhDACQEIYASAhjACQEEYASAgjACSasx4wXdVqtahUKlnPYBpIf5/5PcdkKRaLUSgUsp5xVIQxI5VKJVauXJn1DKaZiy++OOsJTBM7d+6MmTNnZj3jqHgpFQASnjE2gJ+94T1Rm+H/Co6TWi1i7IUXfzyjOWKKvrxF4yuMvRCn/J97s57xK/Nv4wZQm9Ec0XRC1jPItROzHsA0UMt6wDHipVQASAgjACSEEQASwggACWEEgIQwAkBCGAEgIYwAkBBGAEgIIwAkhBEAEsIIAAlhBICEMAJAQhgBICGMAJAQRgBICCMAJIQRABLCCAAJYQSAhDACQEIYASAhjACQEEYASAgjACSEEQASwggACWEEgIQwAkBCGAEgIYwAkBBGAEhkGsZNmzbF4sWLY9asWTF37ty46KKL4sknn6z7nEqlEuvWrYvZs2fHKaecEqtXr47h4eGMFgOQd5mG8eGHH45169bFo48+Gg8++GAcPHgwLrjggnj++efHP2fDhg3xwAMPxNe//vV4+OGH46mnnop3v/vdGa4GIM+as/yH9/X11d3etm1bzJ07Nx5//PH4rd/6rRgZGYmtW7dGuVyOd7zjHRERcffdd8c555wTjz76aLz5zW/OYjYAOdZQX2McGRmJiIjTTz89IiIef/zxOHjwYCxfvnz8c84+++zo7OyMRx555LCPsX///hgdHa37AIBXqmHCODY2FldeeWW85S1vide+9rUREbFnz5448cQT49RTT6373Pb29tizZ89hH2fTpk3R1tY2/rFw4cLjPR2AHGmYMK5bty5+8IMfxFe/+tVf6XGuvvrqGBkZGf/YvXv3MVoIwHSQ6dcYX3L55ZfHjh074tvf/nZ0dHSMn8+bNy8OHDgQzz77bN2zxuHh4Zg3b95hH6ulpSVaWlqO92QAcirTZ4y1Wi0uv/zyuO++++Jb3/pWLFq0qO7+c889N0444YTYtWvX+NmTTz4Zg4ODsXTp0smeC8A0kOkzxnXr1kW5XI6//du/jVmzZo1/3bCtrS1mzpwZbW1t8YEPfCB6enri9NNPj9bW1rjiiiti6dKlviMVgOMi0zDefvvtERGxbNmyuvO777473ve+90VExBe+8IWYMWNGrF69Ovbv3x8XXnhh3HbbbZO8FIDpItMw1mq1X/o5xWIxbr311rj11lsnYREA013DfFcqADQCYQSAhDACQEIYASAhjACQEEYASAgjACSEEQASwggACWEEgIQwAkBCGAEgIYwAkBBGAEhketmp6azuklvVg9kNAThWkn+XvZLLCjYqYczI/v37x38861++muESgGNv//79cdJJJ2U946h4KRUAEp4xZqSlpWX8x8/9xiURTSdkuAbgGKgeHH8FLP133FQjjBkpFAr//0bTCcII5Erdv+OmGC+lAkBCGAEgIYwAkBBGAEgIIwAkhBEAEsIIAAlhBICEMAJAQhgBICGMAJAQRgBICCMAJIQRABLCCAAJYQSAhDACQEIYASAhjACQEEYASAgjACSEEQASwggACWEEgIQwAkBCGAEgIYwAkBBGAEgIIwAkhBEAEsIIAAlhBICEMAJAQhgBICGMAJAQRgBICCMAJIQRABLCCAAJYQSAhDACQEIYASDRnPUAIgpjL0Qt6xHkV60WMfbCiz+e0RxRKGS7h9wqvPT7bIoTxgZwyv+5N+sJAPw/XkoFgIRnjBkpFouxc+fOrGcwDVQqlbj44osjIuK+++6LYrGY8SKmg6n8+0wYM1IoFGLmzJlZz2CaKRaLft/BL+GlVABICCMAJIQRABLCCAAJYQSAhDACQEIYASAhjACQEEYASAgjACSEEQASwggACWEEgIQwAkBCGAEgIYwAkBBGAEgIIwAkhBEAEsIIAAlhBICEMAJAQhgBICGMAJAQRgBICCMAJIQRABLCCAAJYQSAhDACQEIYASAhjACQEEYASAgjACSEEQASwggACWEEgIQwAkBCGAEgIYwAkBBGAEgIIwAkhBEAEsIIAAlhBICEMAJAQhgBICGMAJAQRgBICCMAJIQRABLCCAAJYQSAhDACQEIYASAhjACQEEYASAgjACSEEQASwggACWEEgIQwAkBCGAEgIYwAkBBGAEgIIwAkhBEAEsIIAAlhBICEMAJAQhgBICGMAJAQRgBICCMAJJqzHgCvVK1Wi0qlkvWMKSf9NfPrN3HFYjEKhULWM5hEwsiUUalUYuXKlVnPmNIuvvjirCdMOTt37oyZM2dmPYNJ5KVUAEh4xsiUUSwWY+fOnVnPmHJqtVrs378/IiJaWlq8LDhBxWIx6wlMMmFkyigUCl7SOkonnXRS1hNgyvBSKgAkpkQYb7311vi1X/u1KBaLcf7558d3v/vdrCcBkFMNH8a/+qu/ip6enrjuuuviiSeeiN/4jd+ICy+8MPbu3Zv1NAByqOHD2NvbGx/84Afj/e9/f7zmNa+JO+64I0466aT4i7/4i6ynAZBDDR3GAwcOxOOPPx7Lly8fP5sxY0YsX748HnnkkcP+nP3798fo6GjdBwC8Ug0dxv/+7/+OarUa7e3tdeft7e2xZ8+ew/6cTZs2RVtb2/jHwoULJ2MqADnR0GE8GldffXWMjIyMf+zevTvrSQBMIQ39PsY5c+ZEU1NTDA8P150PDw/HvHnzDvtzWlpaoqWlZTLmAZBDDf2M8cQTT4xzzz03du3aNX42NjYWu3btiqVLl2a4DIC8auhnjBERPT09sXbt2jjvvPNiyZIlcfPNN8fzzz8f73//+7OeBkAONXwY16xZE08//XRce+21sWfPnnjDG94QfX19h3xDDgAcC4VarVbLesTxNDo6Gm1tbTEyMhKtra1ZzwEgAxNpQUN/jREAJpswAkBCGAEgIYwAkBBGAEgIIwAkhBEAEsIIAAlhBICEMAJAQhgBICGMAJAQRgBICCMAJIQRABLCCAAJYQSAhDACQEIYASDRnPWA461Wq0VExOjoaMZLAMjKSw14qQkvJ/dhfO655yIiYuHChRkvASBrzz33XLS1tb3s5xRqrySfU9jY2Fg89dRTMWvWrCgUClnPgUyMjo7GwoULY/fu3dHa2pr1HJh0tVotnnvuuZg/f37MmPHyX0XMfRiBF8PY1tYWIyMjwgi/hG++AYCEMAJAQhhhGmhpaYnrrrsuWlpasp4CDc/XGAEg4RkjACSEEQASwggACWEEgIQwAkBCGAEgIYwAkBBGAEj8XxPYy3fAdJ9vAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_s.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oktnizV-h02z",
        "outputId": "7c1cf5e4-5487-4652-8ae9-b2d885d3ec07"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "NO2      2\n",
              "O3       1\n",
              "CO       1\n",
              "SO2      5\n",
              "PM2.5    3\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 87
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_s['NO2'] = data_s['NO2'].fillna(data_s['NO2'].median())\n",
        "data_s['O3'] = data_s['O3'].fillna(data_s['O3'].median())\n",
        "data_s['CO'] = data_s['CO'].fillna(data_s['CO'].median())\n",
        "data_s['SO2'] = data_s['SO2'].fillna(data_s['SO2'].median())\n",
        "data_s['PM2.5'] = data_s['PM2.5'].fillna(data_s['PM2.5'].median())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w_VG6LLBpCsQ",
        "outputId": "95f3b949-0c60-4217-8dd0-16a237e29306"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-88-89a0cbfb1e2f>:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  data_s['NO2'] = data_s['NO2'].fillna(data_s['NO2'].median())\n",
            "<ipython-input-88-89a0cbfb1e2f>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  data_s['O3'] = data_s['O3'].fillna(data_s['O3'].median())\n",
            "<ipython-input-88-89a0cbfb1e2f>:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  data_s['CO'] = data_s['CO'].fillna(data_s['CO'].median())\n",
            "<ipython-input-88-89a0cbfb1e2f>:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  data_s['SO2'] = data_s['SO2'].fillna(data_s['SO2'].median())\n",
            "<ipython-input-88-89a0cbfb1e2f>:5: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  data_s['PM2.5'] = data_s['PM2.5'].fillna(data_s['PM2.5'].median())\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_s.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7XgQD4LPo6Em",
        "outputId": "ffe527a4-d637-4e4a-ef36-fa2a39753c73"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "NO2      0\n",
              "O3       0\n",
              "CO       0\n",
              "SO2      0\n",
              "PM2.5    0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 89
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "corr = data_s.corr()\n",
        "\n",
        "plt.figure(figsize = (10,7))\n",
        "sns.heatmap(corr, annot = True, cmap = 'Blues')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Zeqvnt8BRVQD",
        "outputId": "dc84dab3-a5fe-49a3-a343-de6f40987a8b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 90
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'Malgun Gothic' not found.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x700 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_s.corr()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "i1a-2Kv304GA",
        "outputId": "08234c0e-ee57-4a9a-f5a2-68345375bd1b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            NO2        O3        CO       SO2     PM2.5\n",
              "NO2    1.000000 -0.576167  0.852030  0.677979  0.629249\n",
              "O3    -0.576167  1.000000 -0.494283 -0.318492 -0.140855\n",
              "CO     0.852030 -0.494283  1.000000  0.636501  0.740859\n",
              "SO2    0.677979 -0.318492  0.636501  1.000000  0.538628\n",
              "PM2.5  0.629249 -0.140855  0.740859  0.538628  1.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-29f9b057-6404-47ac-be4e-2303deacbcfe\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>NO2</th>\n",
              "      <th>O3</th>\n",
              "      <th>CO</th>\n",
              "      <th>SO2</th>\n",
              "      <th>PM2.5</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>NO2</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.576167</td>\n",
              "      <td>0.852030</td>\n",
              "      <td>0.677979</td>\n",
              "      <td>0.629249</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>O3</th>\n",
              "      <td>-0.576167</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.494283</td>\n",
              "      <td>-0.318492</td>\n",
              "      <td>-0.140855</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CO</th>\n",
              "      <td>0.852030</td>\n",
              "      <td>-0.494283</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.636501</td>\n",
              "      <td>0.740859</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SO2</th>\n",
              "      <td>0.677979</td>\n",
              "      <td>-0.318492</td>\n",
              "      <td>0.636501</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.538628</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PM2.5</th>\n",
              "      <td>0.629249</td>\n",
              "      <td>-0.140855</td>\n",
              "      <td>0.740859</td>\n",
              "      <td>0.538628</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-29f9b057-6404-47ac-be4e-2303deacbcfe')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-29f9b057-6404-47ac-be4e-2303deacbcfe button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-29f9b057-6404-47ac-be4e-2303deacbcfe');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "corr['PM2.5'].sort_values(ascending=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F1k7FHihBPLd",
        "outputId": "72e6f8a0-2b77-4c93-8394-4c1f08acd93e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PM2.5    1.000000\n",
              "CO       0.740859\n",
              "NO2      0.629249\n",
              "SO2      0.538628\n",
              "O3      -0.140855\n",
              "Name: PM2.5, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 91
        }
      ]
    }
  ]
}
